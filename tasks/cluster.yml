---

- name: Install python-pip to install python packages (clustering)
  apt:
    name: '{{ item }}'
    state: present
  with_items:
    - python-pip
    # build dependencies to install ansible pip package
    - libyaml-dev
    - python-dev

- name: Install boto & ansible to update clustering on the instance (clustering)
  pip:
    name: '{{ item }}'
    state: latest
  with_items:
    - pip
    - jinja2
    - boto
    - ansible

- name: Set rabbit conf file (clustering)
  template:
    src: rabbitmq-env.conf.j2
    dest: /etc/rabbitmq/rabbitmq-env.conf

- name: ensure cookies are the same between all envs (clustering)
  template:
    src: erlang.cookie.j2
    dest: /var/lib/rabbitmq/.erlang.cookie

- name: get server hostnames (clustering)
  ec2_search:
    key: "{{ rabbitmq_ec2_tag_key }}"
    value: "{{ rabbitmq_ec2_tag_value }}"
    region: "{{ rabbitmq_ec2_region }}"
  environment:
    AWS_ACCESS_KEY_ID:      "{{ rabbitmq_cluster_aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY:  "{{ rabbitmq_cluster_aws_secret_access_key }}"
  register: nodes

- name: start rabbitmq-server (clustering)
  service:
    name: rabbitmq-server
    state: started

- name: turn off rabbitmq but not the erlang process (clustering)
  command: "{{ item }}"
  with_items:
    - rabbitmqctl stop_app
    - rabbitmqctl reset

- name: cluster all known nodes (clustering)
  command: "rabbitmqctl join_cluster rabbit@{{ item['hostname'] }}{{ rabbitmq_nodename_suffix }}"
  with_items: "{{ nodes['info']|default([]) }}"
  when: nodes
  ignore_errors: yes

- name: turn back on rabbitmq
  command: rabbitmqctl start_app

- name: stop rabbitmq-server (clustering)
  service:
    name: rabbitmq-server
    state: stopped
